Perfect 👍 — let’s combine **all the code** (frontend + backend + SQL) into **one complete, working project** so you can run and demonstrate it easily.

Below is the **full combined version** of the **Employee Management System (AngularJS + Node.js + MySQL)**.

---

# 🧩 EMPLOYEE MANAGEMENT SYSTEM — Full Project Code

---

## ⚙️ 1. Database Setup (MySQL)

**Filename:** `employee_db.sql`

```sql
-- Create Database
CREATE DATABASE employee_db;
USE employee_db;

-- Create Table
CREATE TABLE employees (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100),
  email VARCHAR(100),
  position VARCHAR(100),
  salary DECIMAL(10,2)
);

-- Insert Sample Data
INSERT INTO employees (name, email, position, salary)
VALUES
('Alice Johnson', 'alice@company.com', 'Developer', 50000),
('Bob Smith', 'bob@company.com', 'Manager', 65000);
```

---

## 🖥️ 2. Backend Code (Node.js + Express + MySQL)

**Folder:** `backend/`
**Files:**

* `server.js`
* `package.json`

---

### 📁 `package.json`

```json
{
  "name": "employee-backend",
  "version": "1.0.0",
  "description": "Employee Management System Backend (Node.js + MySQL)",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "body-parser": "^1.20.2",
    "cors": "^2.8.5",
    "express": "^4.19.2",
    "mysql2": "^3.9.1"
  }
}
```

### 📁 `server.js`

```js
const express = require('express');
const mysql = require('mysql2');
const cors = require('cors');
const bodyParser = require('body-parser');

const app = express();
app.use(cors());
app.use(bodyParser.json());

// MySQL connection
const db = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: 'yourpassword', // 🔹 Replace with your MySQL password
  database: 'employee_db'
});

db.connect(err => {
  if (err) throw err;
  console.log('✅ Connected to MySQL Database!');
});

// Routes

// Get all employees
app.get('/api/employees', (req, res) => {
  db.query('SELECT * FROM employees', (err, results) => {
    if (err) return res.status(500).send(err);
    res.json(results);
  });
});

// Add new employee
app.post('/api/employees', (req, res) => {
  const { name, email, position, salary } = req.body;
  db.query(
    'INSERT INTO employees (name, email, position, salary) VALUES (?, ?, ?, ?)',
    [name, email, position, salary],
    (err, results) => {
      if (err) return res.status(500).send(err);
      res.json({ message: '✅ Employee added successfully!' });
    }
  );
});

// Update employee
app.put('/api/employees/:id', (req, res) => {
  const { id } = req.params;
  const { name, email, position, salary } = req.body;
  db.query(
    'UPDATE employees SET name=?, email=?, position=?, salary=? WHERE id=?',
    [name, email, position, salary, id],
    (err, results) => {
      if (err) return res.status(500).send(err);
      res.json({ message: '✅ Employee updated successfully!' });
    }
  );
});

// Delete employee
app.delete('/api/employees/:id', (req, res) => {
  const { id } = req.params;
  db.query('DELETE FROM employees WHERE id=?', [id], (err, results) => {
    if (err) return res.status(500).send(err);
    res.json({ message: '🗑️ Employee deleted successfully!' });
  });
});

app.listen(3000, () => console.log('🚀 Server running on http://localhost:3000'));
```

---

## 🎨 3. Frontend Code (AngularJS)

**Folder:** `frontend/`

Files:

* `index.html`
* `app.js`
* `controllers/employeeController.js`

---

### 📁 `index.html`

```html
<!DOCTYPE html>
<html ng-app="employeeApp">
<head>
  <meta charset="UTF-8">
  <title>Employee Management System</title>
  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
  <script src="app.js"></script>
  <script src="controllers/employeeController.js"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>

<body ng-controller="employeeCtrl" class="container mt-5">

  <h2 class="text-center mb-4">👨‍💼 Employee Management System</h2>

  <!-- Add Employee Form -->
  <form class="row g-3" ng-submit="addEmployee()">
    <div class="col-md-3">
      <input type="text" class="form-control" ng-model="newEmployee.name" placeholder="Name" required>
    </div>
    <div class="col-md-3">
      <input type="email" class="form-control" ng-model="newEmployee.email" placeholder="Email" required>
    </div>
    <div class="col-md-3">
      <input type="text" class="form-control" ng-model="newEmployee.position" placeholder="Position" required>
    </div>
    <div class="col-md-2">
      <input type="number" class="form-control" ng-model="newEmployee.salary" placeholder="Salary" required>
    </div>
    <div class="col-md-1">
      <button type="submit" class="btn btn-primary w-100">Add</button>
    </div>
  </form>

  <hr class="my-4">

  <!-- Employee Table -->
  <table class="table table-bordered table-striped text-center">
    <thead class="table-dark">
      <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Email</th>
        <th>Position</th>
        <th>Salary</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr ng-repeat="emp in employees">
        <td>{{emp.id}}</td>
        <td>{{emp.name}}</td>
        <td>{{emp.email}}</td>
        <td>{{emp.position}}</td>
        <td>{{emp.salary | currency}}</td>
        <td>
          <button class="btn btn-warning btn-sm" ng-click="editEmployee(emp)">Edit</button>
          <button class="btn btn-danger btn-sm" ng-click="deleteEmployee(emp.id)">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>

</body>
</html>
```

---

### 📁 `app.js`

```js
// AngularJS App Initialization
var app = angular.module('employeeApp', []);
```

---

### 📁 `controllers/employeeController.js`

```js
app.controller('employeeCtrl', function($scope, $http) {
  const apiUrl = 'http://localhost:3000/api/employees';

  $scope.employees = [];
  $scope.newEmployee = {};

  // Load all employees
  $scope.loadEmployees = function() {
    $http.get(apiUrl).then(res => $scope.employees = res.data);
  };

  // Add employee
  $scope.addEmployee = function() {
    if (!$scope.newEmployee.name) return alert('Please fill all fields!');
    $http.post(apiUrl, $scope.newEmployee).then(() => {
      $scope.newEmployee = {};
      $scope.loadEmployees();
    });
  };

  // Delete employee
  $scope.deleteEmployee = function(id) {
    if (confirm('Are you sure you want to delete this employee?')) {
      $http.delete(apiUrl + '/' + id).then(() => $scope.loadEmployees());
    }
  };

  // Edit employee (optional future feature)
  $scope.editEmployee = function(emp) {
    alert('Edit feature can be implemented with a modal popup.');
  };

  // Initial load
  $scope.loadEmployees();
});
```

---

## 🚀 4. How to Run the Project

1. **Set up database**

   * Open MySQL and run the SQL file (`employee_db.sql`).

2. **Start backend**

   ```bash
   cd backend
   npm install
   npm start
   ```

   Output:
   `✅ Connected to MySQL Database!`
   `🚀 Server running on http://localhost:3000`

3. **Open frontend**

   * Open `frontend/index.html` in a browser (or use Live Server in VS Code).

4. **Test**

   * Add new employees.
   * Delete or modify records.
   * Check MySQL to confirm updates.

---

## ✅ Final Output Summary

| Action | Description                       |
| ------ | --------------------------------- |
| Add    | Inserts a new record in MySQL     |
| Delete | Removes the record from DB        |
| View   | Displays all records dynamically  |
| Edit   | Can be added later via PUT method |

---
